<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Academic</title>
    <link>https://enriquecoronadozu.github.io/tags/python/index.xml</link>
    <description>Recent content in Python on Academic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Enrique Coronado</copyright>
    <atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to create a programing framework using Google Blockly</title>
      <link>https://enriquecoronadozu.github.io/post/2017-02-27-%20Google%20Blocky/</link>
      <pubDate>Sun, 05 Feb 2017 10:00:00 +0000</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/post/2017-02-27-%20Google%20Blocky/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Google Blockly is a open source and web-based library which allows users to build programs by dragging blocks together in a visual programming editor. The programs builded with Blockly can be exported to many languages, including JavaScript, Python, PHP, C++, among others.&lt;/p&gt;

&lt;p&gt;This post consist of a set of examples that explains how to create a visual programing framework using Google Blockly and Python. This tutorial is oriented to create Desktop applications.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Basic knowledge in Python such as creation of new python scripts program a execution of a python program in Windows, MacOS or Linux.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;part-1-download-and-launch-a-google-blockly-editor-in-a-server-using-python&#34;&gt;Part 1: Download and launch a Google Blockly editor in a server using Python.&lt;/h2&gt;

&lt;p&gt;Google Blockly is mainly written in JavaScript, which is a programming language oriented to HTML and Web applications. In order to use a Google Blockly editor it is necessary to run a web page that contains the definition of the blocks and the user interface in a HTTP server. One way to do this is using the python libraries BaseHTTPServer and SimpleHTTPServer. This first part of the tutorial explains how to run a simple Google Blockly editor using this libraries.&lt;/p&gt;

&lt;h3 id=&#34;procedure&#34;&gt;Procedure:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First download Google Blockly from (update March 2017):
&lt;a href=&#34;https://developers.google.com/blockly/guides/get-started/web&#34; target=&#34;_blank&#34;&gt;https://developers.google.com/blockly/guides/get-started/web&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unzip the file and rename the folder as &lt;em&gt;bloclky&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a new python file with the next code:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/python

import BaseHTTPServer
import SimpleHTTPServer
import os
import subprocess
import tempfile
import urllib


# First define the ip (local host) and port of the application
ip = &amp;quot;127.0.0.1&amp;quot;

# You can change the value of the port for your test
port = 8092
dir_host = ip + &amp;quot;:&amp;quot; + str(port)

# Then we will use a class to set up a very basic web server
# We need to define the path of a html file called *index.html*
# This file will have the interface of our application

# The next line indicate the path of the *index.html* file
# We will use a demo in Google Blockly
index_location= &amp;quot;/blockly/demos/toolbox/index.html&amp;quot;

# This is the class used to set up the server
# Note: if you want to have a better understanding of this class, then see: &amp;lt;https://docs.python.org/2/library/simplehttpserver.html&amp;gt;
class Handler(SimpleHTTPServer.SimpleHTTPRequestHandler):
    def do_HEAD(self):
        if self.path != &amp;quot;/&amp;quot;:
            return SimpleHTTPServer.SimpleHTTPRequestHandler.do_HEAD(self)
        self.send_response(200)
        self.send_header(&amp;quot;content-type&amp;quot;, &amp;quot;text/html;charset=utf-8&amp;quot;)
        self.send_header(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;)
        self.end_headers()

    def do_GET(self):
        if self.path != &amp;quot;/&amp;quot;:
            return SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)
        else:
            self.send_response(302)
            self.send_header(&amp;quot;Location&amp;quot;, index_location)
            self.end_headers()

    def do_POST(self):
        if self.path != &amp;quot;/&amp;quot;:
            return SimpleHTTPServer.SimpleHTTPRequestHandler.do_POST(self)
        else:
            self.send_response(400)


# This is the main function
if __name__ == &#39;__main__&#39;:

    print &amp;quot;Application can now be accessed at&amp;quot;, dir_host

    # Then we launch the server
    server = BaseHTTPServer.HTTPServer((ip, port), Handler)
    server.pages = {}
    server.serve_forever()

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;explanation-of-the-code&#34;&gt;Explanation of the code:&lt;/h2&gt;

&lt;p&gt;The main idea is to define the port and ip address of our application, define the path of the interface of out application (index.html) and launch the server with python (code explained in the comments).&lt;/p&gt;

&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Run the python file and open Chrome, Firefox or Safari.&lt;/li&gt;
&lt;li&gt;In the internet navigator go to &lt;a href=&#34;http://127.0.0.1:8092/&#34; target=&#34;_blank&#34;&gt;http://127.0.0.1:8092/&lt;/a&gt; (or the url indicated in the python program). Then you will be able to see the next interface, which is and example of a Blockly editor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://enriquecoronadozu.github.io/img/blockly/interface.png&#34; alt=&#34;Blockly editor&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;part-2-create-a-new-block-and-generate-python-code&#34;&gt;Part 2: Create a new Block and generate Python code.&lt;/h2&gt;</description>
    </item>
    
  </channel>
</rss>

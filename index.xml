<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Academic on Academic</title>
    <link>https://enriquecoronadozu.github.io/index.xml</link>
    <description>Recent content in Academic on Academic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Enrique Coronado</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to create a programing framework using Google Blockly</title>
      <link>https://enriquecoronadozu.github.io/post/2017-02-27-%20Google%20Blocky/</link>
      <pubDate>Sun, 05 Feb 2017 10:00:00 +0000</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/post/2017-02-27-%20Google%20Blocky/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Google Blockly is a open source and web-based library which allows users to build programs by dragging blocks together in a visual programming editor. The programs builded with Blockly can be exported to many languages, including JavaScript, Python, PHP, C++, among others.&lt;/p&gt;

&lt;p&gt;This post consist of a set of examples that explains how to create a visual programing framework using Google Blockly and Python. This tutorial is oriented to create Desktop applications.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Basic knowledge in Python such as creation of new python scripts program a execution of a python program in Windows, MacOS or Linux.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;part-1-download-and-launch-a-google-blockly-editor-in-a-server-using-python&#34;&gt;Part 1: Download and launch a Google Blockly editor in a server using Python.&lt;/h2&gt;

&lt;p&gt;Google Blockly is mainly written in JavaScript, which is a programming language oriented to HTML and Web applications. In order to use a Google Blockly editor it is necessary to run a web page that contains the definition of the blocks and the user interface in a HTTP server. One way to do this is using the python libraries BaseHTTPServer and SimpleHTTPServer. This first part of the tutorial explains how to run a simple Google Blockly editor using this libraries.&lt;/p&gt;

&lt;h3 id=&#34;procedure&#34;&gt;Procedure:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First download Google Blockly from (update March 2017):
&lt;a href=&#34;https://developers.google.com/blockly/guides/get-started/web&#34; target=&#34;_blank&#34;&gt;https://developers.google.com/blockly/guides/get-started/web&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unzip the file and rename the folder as &lt;em&gt;bloclky&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a new python file with the next code:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/python

import BaseHTTPServer
import SimpleHTTPServer
import os
import subprocess
import tempfile
import urllib


# First define the ip (local host) and port of the application
ip = &amp;quot;127.0.0.1&amp;quot;

# You can change the value of the port for your test
port = 8092
dir_host = ip + &amp;quot;:&amp;quot; + str(port)

# Then we will use a class to set up a very basic web server
# We need to define the path of a html file called *index.html*
# This file will have the interface of our application

# The next line indicate the path of the *index.html* file
# We will use a demo in Google Blockly
index_location= &amp;quot;/blockly/demos/toolbox/index.html&amp;quot;

# This is the class used to set up the server
# Note: if you want to have a better understanding of this class, then see: &amp;lt;https://docs.python.org/2/library/simplehttpserver.html&amp;gt;
class Handler(SimpleHTTPServer.SimpleHTTPRequestHandler):
    def do_HEAD(self):
        if self.path != &amp;quot;/&amp;quot;:
            return SimpleHTTPServer.SimpleHTTPRequestHandler.do_HEAD(self)
        self.send_response(200)
        self.send_header(&amp;quot;content-type&amp;quot;, &amp;quot;text/html;charset=utf-8&amp;quot;)
        self.send_header(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;)
        self.end_headers()

    def do_GET(self):
        if self.path != &amp;quot;/&amp;quot;:
            return SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)
        else:
            self.send_response(302)
            self.send_header(&amp;quot;Location&amp;quot;, index_location)
            self.end_headers()

    def do_POST(self):
        if self.path != &amp;quot;/&amp;quot;:
            return SimpleHTTPServer.SimpleHTTPRequestHandler.do_POST(self)
        else:
            self.send_response(400)


# This is the main function
if __name__ == &#39;__main__&#39;:

    print &amp;quot;Application can now be accessed at&amp;quot;, dir_host

    # Then we launch the server
    server = BaseHTTPServer.HTTPServer((ip, port), Handler)
    server.pages = {}
    server.serve_forever()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;## Explanation of the code:&lt;br /&gt;
The main idea is to define the port and ip address of our application, define the path of the interface of out application (index.html) and launch the server with python (code explained in the comments).&lt;/p&gt;

&lt;p&gt;## Results&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run the python file and open Chrome, Firefox or Safari.&lt;/li&gt;
&lt;li&gt;In the internet navigator go to &lt;a href=&#34;http://127.0.0.1:8092/&#34; target=&#34;_blank&#34;&gt;http://127.0.0.1:8092/&lt;/a&gt; (or the url indicated in the python program). Then you will be able to see the next interface, which is and example of a Blockly editor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;{{&amp;lt; figure src=&amp;ldquo;/img/blockly/interface.png&amp;rdquo; title=&amp;ldquo;Blockly editor&amp;rdquo; &amp;gt;}}&lt;/p&gt;

&lt;h2 id=&#34;part-2-create-a-new-block-and-generate-python-code&#34;&gt;Part 2: Create a new Block and generate Python code.&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>NAO basics</title>
      <link>https://enriquecoronadozu.github.io/post/2017-02-05-NAO%20basics/</link>
      <pubDate>Sun, 05 Feb 2017 10:00:00 +0000</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/post/2017-02-05-NAO%20basics/</guid>
      <description>&lt;p&gt;In this document a set of notes and useful links about NAO robot are presented. &lt;/p&gt;

&lt;h2 id=&#34;nao-safety&#34;&gt;Nao safety&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Best practices: &lt;a href=&#34;http://doc.aldebaran.com/1-14/nao/practices.html&#34; target=&#34;_blank&#34;&gt;http://doc.aldebaran.com/1-14/nao/practices.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Put the robot in a stable position before &amp;ldquo;releasing stiffness&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;battery&#34;&gt;Battery&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;From 30 minutes to 2 hours.&lt;/li&gt;
&lt;li&gt;Charging the battery: &lt;a href=&#34;http://doc.aldebaran.com/1-14/nao/battery-charging.html&#34; target=&#34;_blank&#34;&gt;http://doc.aldebaran.com/1-14/nao/battery-charging.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;turn-on-the-robot&#34;&gt;Turn on the robot&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Press the chest button once.&lt;/li&gt;
&lt;li&gt;The boot process is completed when NAO says “OGNAK GNOUK” while its Chest button becomes white.
&amp;lt; &lt;a href=&#34;http://doc.aldebaran.com/1-14/nao/nao-turn-on.html&#34; target=&#34;_blank&#34;&gt;http://doc.aldebaran.com/1-14/nao/nao-turn-on.html&lt;/a&gt;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;know-ip-address&#34;&gt;Know IP address&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Press the chest button once, when it&amp;rsquo;s on&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;battery-level&#34;&gt;Battery level&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Indicated in the chest: green, yellow and blinking red.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;release-stiffness&#34;&gt;Release stiffness&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Press two times chest button.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;shutdown-the-robot&#34;&gt;Shutdown the robot&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Press the chest button for 3 seconds, until NAO says “GNUK GNUK”.&lt;/li&gt;
&lt;li&gt;The shutdown process takes approximately 18 seconds&lt;/li&gt;
&lt;li&gt;The shutdown process is completed when all the LEDs are off.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;nao-configuration&#34;&gt;NAO configuration&lt;/h2&gt;

&lt;p&gt;Nao wifi connection: &lt;a href=&#34;http://doc.aldebaran.com/1-14/nao/nao-connecting.html&#34; target=&#34;_blank&#34;&gt;http://doc.aldebaran.com/1-14/nao/nao-connecting.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;problems-with-nao&#34;&gt;Problems with NAO?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Press the chest button for 8 seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;nao-basic-software&#34;&gt;NAO basic software:&lt;/h2&gt;

&lt;p&gt;NAO basic softwares are:
- Choregraphe: for create animation, dialogs and behavior. Also for simple simulation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://doc.aldebaran.com/1-14/software/choregraphe/index.html#choregraphe&#34; target=&#34;_blank&#34;&gt;http://doc.aldebaran.com/1-14/software/choregraphe/index.html#choregraphe&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monitor: Feedback of the state and sensors of the robot.&lt;/li&gt;
&lt;li&gt;SDK: Can be used to remotely control, create new NAOqi modules and enrich Choregraphe box library (use python)&lt;/li&gt;
&lt;li&gt;OpenNAO: Operating System of the robot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://doc.aldebaran.com/1-14/dev/tools/opennao.html#opennao-advanced&#34; target=&#34;_blank&#34;&gt;http://doc.aldebaran.com/1-14/dev/tools/opennao.html#opennao-advanced&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NAOqi: is the main software that runs on the robot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://doc.aldebaran.com/1-14/dev/naoqi/index.html#naoqi-framework-overview&#34; target=&#34;_blank&#34;&gt;http://doc.aldebaran.com/1-14/dev/naoqi/index.html#naoqi-framework-overview&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;first-steps-and-hello-world-in-python&#34;&gt;First steps and hello world in python:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://doc.aldebaran.com/1-14/software/choregraphe/choregraphe_first_steps.html&#34; target=&#34;_blank&#34;&gt;http://doc.aldebaran.com/1-14/software/choregraphe/choregraphe_first_steps.html&lt;/a&gt;
&lt;a href=&#34;http://doc.aldebaran.com/1-14/getting_started/helloworld_python.html#helloworld-python&#34; target=&#34;_blank&#34;&gt;http://doc.aldebaran.com/1-14/getting_started/helloworld_python.html#helloworld-python&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sphinx &amp; Github pages</title>
      <link>https://enriquecoronadozu.github.io/post/2017-02-04-Sphinx%20&amp;%20Github%20pages/</link>
      <pubDate>Sat, 04 Feb 2017 10:00:00 +0000</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/post/2017-02-04-Sphinx%20&amp;%20Github%20pages/</guid>
      <description>&lt;p&gt;This tutorial shows how to use Github pages + Sphinx for publish nice looking documentation. &lt;/p&gt;

&lt;h2 id=&#34;install-sphinx&#34;&gt;Install Sphinx&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;pip install sphinx
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration-of-the-project-in-sphinx&#34;&gt;Configuration of the project in Sphinx&lt;/h2&gt;

&lt;p&gt;In the main folder of the project create a new folder with the name of &lt;em&gt;docs&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir docs
cd docs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Write the next command to start the sphinx configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sphinx-quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;my-sphinx-configuration&#34;&gt;My sphinx configuration:&lt;/h2&gt;

&lt;p&gt;Press &lt;strong&gt;enter&lt;/strong&gt; for:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Root path for the documentation [.]:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;strong&gt;y&lt;/strong&gt; for :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Separate source and build directories (y/n) [n]:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;strong&gt;n&lt;/strong&gt; for :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Name prefix for templates and static dir [ _ ]:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Complete information for:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Project name: -&amp;gt; write *project name*
Author name(s): -&amp;gt; write the name of the autor
Project version: -&amp;gt; Write the version numer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;strong&gt;enter&lt;/strong&gt; for:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Project release [0.1]:
Project language [en]:
Source file suffix [.rst]:  
Name of your master document (without suffix) [index]:
Do you want to use the epub builder (y/n) [n]:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;strong&gt;y&lt;/strong&gt; for :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autodoc: automatically insert docstrings from modules (y/n) [n]:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;strong&gt;enter&lt;/strong&gt; for:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;doctest: automatically test code snippets in doctest blocks (y/n) [n]:
intersphinx: link between Sphinx documentation of different projects (y/n) [n]:
todo: write &amp;quot;todo&amp;quot; entries that can be shown or hidden on build (y/n) [n]:
coverage: checks for documentation coverage (y/n) [n]:
pngmath: include math, rendered as PNG images (y/n) [n]:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;strong&gt;y&lt;/strong&gt; for :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mathjax: include math, rendered in the browser by MathJax (y/n) [n]: y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;strong&gt;enter&lt;/strong&gt; for the rest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ifconfig: conditional inclusion of content based on config values (y/n) [n]:
viewcode: include links to the source code of documented Python objects (y/n) [n]:
Create Makefile? (y/n) [y]:
Create Windows command file? (y/n) [y]:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: enter selects the default value&lt;/p&gt;

&lt;h2 id=&#34;function-for-compile-and-clean&#34;&gt;Function for compile and clean&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;make html
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;make clean
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;add-sources-path-for-python-documentation&#34;&gt;Add sources path for python documentation&lt;/h2&gt;

&lt;p&gt;Uncomment the line in the source/conf.py script&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sys.path.insert(0, os.path.abspath(&#39;.&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the argument &amp;lsquo;.&amp;rsquo; to set the path of the source files, example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sys.path.insert(0, os.path.abspath(&#39;../../src&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;auto-publication-of-the-documentation&#34;&gt;Auto publication of the documentation&lt;/h1&gt;

&lt;p&gt;Create a .sh file with the next lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash


# build the docs
cd docs
make clean
make html
cd ..

# commit and push
git add -A
git commit -m &amp;quot;pushing docs&amp;quot;
git push origin master

# switch branches and pull the data we want
git checkout gh-pages
rm -rf .
touch .nojekyll
git checkout master docs/build/html
mv ./docs/build/html/* ./
rm -rf ./docs
git add -A
git commit -m &amp;quot;publishing docs...&amp;quot;
git push origin gh-pages

# switch back
git checkout master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Put this script in the root of the project, run this script using the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sh autodoc.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;read-the-docs-theme-working&#34;&gt;Read the docs theme (working&amp;hellip;):&lt;/h1&gt;

&lt;p&gt;Download the Read the Docs theme&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install sphinx_rtd_theme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add githubpages extension:&lt;/p&gt;

&lt;p&gt;Open conf.py and in extension add the line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sphinx.ext.githubpages&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, the extensions will be as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extensions = [
    &#39;sphinx.ext.autodoc&#39;,
    &#39;sphinx.ext.mathjax&#39;,
    &#39;sphinx.ext.githubpages&#39;,
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Import read the docs theme&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import sphinx_rtd_theme
html_theme = &amp;quot;sphinx_rtd_theme&amp;quot;
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>ZeroMQ notes 1</title>
      <link>https://enriquecoronadozu.github.io/post/2017-02-03-ZeroQM%20notes%20part%201/</link>
      <pubDate>Fri, 03 Feb 2017 10:00:00 +0000</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/post/2017-02-03-ZeroQM%20notes%20part%201/</guid>
      <description>&lt;p&gt;This post present a set of notes and python examples of ZeroMQ. &lt;/p&gt;

&lt;h2 id=&#34;instalation&#34;&gt;Instalation:&lt;/h2&gt;

&lt;p&gt;First intall the libzmq libraries:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://zeromq.org/intro:get-the-software&#34; target=&#34;_blank&#34;&gt;http://zeromq.org/intro:get-the-software&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The install the binaries in Python using the next line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# (Windows or OS X)
pip install --wheel pyzmq
# or
easy_install pyzmq
# or (pretty much anywhere)
pip install pyzmq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More info in: &lt;a href=&#34;http://zeromq.org/bindings:python&#34; target=&#34;_blank&#34;&gt;http://zeromq.org/bindings:python&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;zeromq-main-idea&#34;&gt;ZeroMQ main idea&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ZeroMQ&lt;/strong&gt; is en general a middleware that augments the capabilities of TCP/IP sockets. Is a socket system that allow to do concurrency.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is fast&lt;/li&gt;
&lt;li&gt;Use to connect several parts of a distributed system&lt;/li&gt;
&lt;li&gt;Works asynchronously (unlike regular socket implementation that works synchronously)&lt;/li&gt;
&lt;li&gt;Allows the implementation of several comunication patterns as request/reply and publish/subcriber&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;context-in-zeromq&#34;&gt;Context in ZeroMQ&lt;/h2&gt;

&lt;p&gt;Used to help to manage the sockets created in ZeroMQ. They are created in the start of the aplication.&lt;/p&gt;

&lt;h2 id=&#34;request-reply-example&#34;&gt;Request/Reply example&lt;/h2&gt;

&lt;p&gt;For this we will use the type sockets zmq.REP for the server and zmq.REQ for the client.&lt;/p&gt;

&lt;h3 id=&#34;server-code&#34;&gt;Server code&lt;/h3&gt;

&lt;p&gt;First import the zmq libraries&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import zmq
import time

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then, define a new context&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;context = zmq.Context()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;now define the socket for Request/Reply patter using zmq.REP as argument on the context&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sock = context.socket(zmq.REP)
sock.bind(&amp;quot;tcp://127.0.0.1:5685&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;run the server, get the client message and send a response &amp;ldquo;Echo&amp;rdquo; + message&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;while True:
    message = sock.recv()
    sock.send(&amp;quot;Echo: &amp;quot; +  message)
    print (&amp;quot;Echo: &amp;quot; +  message)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Putting all together:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import zmq
import time
context = zmq.Context()
sock = context.socket(zmq.REP)
sock.bind(&amp;quot;tcp://127.0.0.1:5685&amp;quot;)
while True:
    message = sock.recv()
    sock.send(&amp;quot;Echo: &amp;quot; +  message)
    print (&amp;quot;Echo: &amp;quot; +  message)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To exit press ctrl+x (Termianal in OSX/Linux)&lt;/p&gt;

&lt;h1 id=&#34;client-code&#34;&gt;Client code&lt;/h1&gt;

&lt;p&gt;The client code it is similar but we use the next elements instead:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;zmq.REQ&lt;/li&gt;
&lt;li&gt;socket.connect&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import zmq
import time
context = zmq.Context()

# Connect with the server
sock = context.socket(zmq.REQ)
sock.connect(&amp;quot;tcp://127.0.0.1:5685&amp;quot;)

# Send a message using the socket

sock.send(&amp;quot;hello&amp;quot;)
print (sock.recv())
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Deep Learning: Introduction to Recurrent Neural Networks</title>
      <link>https://enriquecoronadozu.github.io/post/2017-02-01-Deep%20Learning/</link>
      <pubDate>Wed, 01 Feb 2017 10:00:00 +0000</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/post/2017-02-01-Deep%20Learning/</guid>
      <description>&lt;p&gt;This post gives and introduction to Recurrent Neural Networks (RNN) &lt;/p&gt;

&lt;h2 id=&#34;notations&#34;&gt;Notations:&lt;/h2&gt;

&lt;h3 id=&#34;list-of-abbrevations&#34;&gt;List of abbrevations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;RNN (Recurrent Neural Networks)&lt;/li&gt;
&lt;li&gt;FFN (Feed-forward network)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;list-of-symbols&#34;&gt;List of symbols&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;$T$,  length of a sequence&lt;/li&gt;
&lt;li&gt;$\tau$ length of a minibatch of a sequence&lt;/li&gt;
&lt;li&gt;$\mathbf{x} = {x_1, x_2, \dots, x_n }$, vector set&lt;/li&gt;
&lt;li&gt;$\mathcal{X} = {x_1, x_2, \dots, x_T }$,  sequence&lt;/li&gt;
&lt;li&gt;$x$,  element of a set or of a sequence&lt;/li&gt;
&lt;li&gt;$\mathbf{h}$ state in the hidden units of the network&lt;/li&gt;
&lt;li&gt;$t$,    time step&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;theory&#34;&gt;Theory:&lt;/h2&gt;

&lt;h3 id=&#34;recurrent-neural-networks-rnn&#34;&gt;Recurrent Neural Networks (RNN)&lt;/h3&gt;

&lt;p&gt;Type of Neural Network for processing &lt;strong&gt;secuential data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Main ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are called recurrent becuase perform the same task for every element of a sequence&lt;/li&gt;
&lt;li&gt;Have a memory that capture the information calculated before&lt;/li&gt;
&lt;li&gt;Use cycles to represent the influnce of past values at the current value&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;comparison-between-traditional-neural-networks-and-rnn&#34;&gt;Comparison between traditional Neural Networks and RNN&lt;/h3&gt;

&lt;p&gt;Traditional Neural Networks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Outputs are independent of previous computations (no good idea for prediction)&lt;/li&gt;
&lt;li&gt;Inputs are &lt;strong&gt;sets&lt;/strong&gt; of features of fixed length&lt;/li&gt;
&lt;li&gt;Diferent parameters (weights) for each input feature&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recurrent Neural Networks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Outputs are dependents of previous computations (each output is a function of the previous outputs)&lt;/li&gt;
&lt;li&gt;Inputs are &lt;strong&gt;sequential&lt;/strong&gt; information (can be of variable length)&lt;/li&gt;
&lt;li&gt;Parameter sharing: share the same weights across several time steps. This make possible to apply a RNN model to examples of diferent lengths.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note: See appendix A to know more about sequences&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;feed-forward-network-ffn&#34;&gt;Feed-forward network (FFN)&lt;/h3&gt;

&lt;p&gt;Given a vector set $\mathbf{x} = {x_1, x_2, \dots , x_j, \dots, x_n }$ of $n$ inputs features, the output $i$ of a FFN is given by:&lt;/p&gt;

&lt;p&gt;\begin{equation}
y&lt;em&gt;i = f \left( \sum&lt;/em&gt;{j}^{m} W_{ij}  x_j + b_i \right)
\end{equation}&lt;/p&gt;

&lt;p&gt;Which represent the sum of each element $j$ of the vector of inputs multiplied by the weigth $(i,j)$ in the neuron $i$ plus the bias value in the neuron $i$, and $f$ represent the output function (also called activation function).&lt;/p&gt;

&lt;p&gt;Its matrix form is represeted as:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\mathbf{y} = \mathbf{W} \mathbf{x} + \mathbf{b}
\end{equation}&lt;/p&gt;

&lt;p&gt;where $\mathbf{y}= { y_1, y_2, \dots, y_m }$ is the vector of outputs,  $\mathbf{W}$ a the matrix of weights, and $\mathbf{b} = { b_1, b_2, \dots, b_m }$ is a vector of bias.&lt;/p&gt;

&lt;h3 id=&#34;rnn-operation&#34;&gt;RNN operation:&lt;/h3&gt;

&lt;p&gt;Given a sequence $X = {x_1, x_2, \dots, x_T }$, a new state $\mathbf{h}$ in the hidden units of the RNN is given by the next recurrent function:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\mathbf{h}_t = f&lt;em&gt;h\left(\mathbf{W}\mathbf{h}&lt;/em&gt;{t-1} + \mathbf{U}\mathbf{x}_{t} + \mathbf{b}_h \right)
\end{equation}&lt;/p&gt;

&lt;p&gt;The output $\mathbf{y}_t$ is computed as:&lt;/p&gt;

&lt;p&gt;\begin{equation}
\mathbf{y}_t = f_y \left(  \mathbf{V} \mathbf{h}_t + \mathbf{b}_y  \right)
\end{equation}&lt;/p&gt;

&lt;p&gt;Where $\mathbf{W}$, $\mathbf{U}$ and $\mathbf{V}$ are matrices of parameters. Also $\mathbf{b}_h$ and $\mathbf{b}_h$ are vectors of bias values and $f_h$ and $f_y$ are activation functions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RNN operates in mini batches of the $X$ sequence. Each minibatch can have diferent sequence length $\tau$.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;references&#34;&gt;References:&lt;/h3&gt;

&lt;p&gt;Goodfellow, I., Bengio, Y., &amp;amp; Courville, A. (2016). Deep learning. MIT Press.&lt;/p&gt;

&lt;h2 id=&#34;example-1-simple-keras-implementation&#34;&gt;Example 1: Simple Keras implementation&lt;/h2&gt;

&lt;p&gt;In this example the well known pima dataset (&lt;a href=&#34;https://archive.ics.uci.edu/ml/datasets/Pima+Indians+Diabetes&#34; target=&#34;_blank&#34;&gt;https://archive.ics.uci.edu/ml/datasets/Pima+Indians+Diabetes&lt;/a&gt;) will be used as example of a clasification task using RNN&lt;/p&gt;

&lt;h3 id=&#34;step-1-import-python-libraries-and-load-data-set&#34;&gt;Step 1: Import python libraries and load data set&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import libraries
from numpy import*
from keras.models import Sequential
from keras.layers import Dense, SimpleRNN, Embedding, Activation, LSTM

# load pima indians dataset
dataset = loadtxt(&amp;quot;pima-indians-diabetes.csv&amp;quot;, delimiter=&amp;quot;,&amp;quot;)
# split into input (X) and output (Y) variables
X = dataset[:500,0:8]
Y = dataset[:500,8]

# For validation
X_val = dataset[500:600,0:8]
Y_val = dataset[500:600,8]

n_example,n_inputs = shape(X)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-2-create-a-new-sequential-model&#34;&gt;Step 2: Create a new sequential model&lt;/h3&gt;

&lt;p&gt;We need to define:
- The firts layer
- The other hidden layers if needed
- The output layer&lt;/p&gt;

&lt;p&gt;The model needs to know what input shape it should expect. For this reason, the first layer in a Sequential model (and only the first) needs to receive information about its input shape.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Step 2.1: Specification of a sequential model
model = Sequential()
# Step 2.2: Defintion of the first layer
#model.add(SimpleRNN(32, input_shape=(1,8)))
#model.add(Activation(&amp;quot;sigmoid&amp;quot;))
# Step 2.3 Definition of the uutput layer
# model.add(Dense(10, 1, activation = &amp;quot;sigmoid&amp;quot;))
#model.add(Dense(5))

# Firts layer
#model.add(Embedding(n_inputs, 500))
#model.add(SimpleRNN(3, input_dim = n_inputs))
#model.add(LSTM(3, input_dim = n_inputs))

#model.add(Masking(0, input_dim = n_inputs))
model.add(SimpleRNN(3, input_dim = n_inputs))

#Final
model.add(Dense(1, activation = &amp;quot;sigmoid&amp;quot;))



&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3-compile-the-model&#34;&gt;Step 3: Compile the model&lt;/h3&gt;

&lt;p&gt;This can be done using the next function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model.compile(loss=&#39;binary_crossentropy&#39;,
              optimizer=&#39;adam&#39;,
              metrics=[&#39;accuracy&#39;])

#model.compile(loss=&#39;mean_squared_error&#39;,
#              optimizer=&#39;adam&#39;,
#              metrics=[&#39;accuracy&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-4-reshape-the-data&#34;&gt;Step 4: reshape the data&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;trainX = reshape(X, (X.shape[0],1,X.shape[1]))
validateX = reshape(X_val, (X_val.shape[0],1,X_val.shape[1]))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-5-fit-the-data&#34;&gt;Step 5: Fit the data&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
print(&#39;Training ...&#39;)
model.fit(trainX,Y, batch_size=10, nb_epoch=150, verbose=0)
print (&#39;Training complete&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Training ...
Training complete
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-5-evaluate-the-network&#34;&gt;Step 5: Evaluate the network&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scores = model.evaluate(validateX, Y_val)
print(model.metrics_names[1], scores[1]*100)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt; 32/100 [========&amp;gt;.....................] - ETA: 0s(&#39;acc&#39;, 68.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;references-1&#34;&gt;References:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://keras.io/getting-started/sequential-model-guide/#specifying-the-input-shape&#34; target=&#34;_blank&#34;&gt;https://keras.io/getting-started/sequential-model-guide/#specifying-the-input-shape&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;

&lt;h3 id=&#34;a-what-is-a-sequence&#34;&gt;A:  What is a sequence?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A sequence is an enumerated collection of objects (i.e list of elements that are in some order).&lt;/li&gt;
&lt;li&gt;The number of elements is called the length of the sequence, is represented in this tutorial as $T$&lt;/li&gt;
&lt;li&gt;The same elements can appear multiple times at different positions in the sequence.&lt;/li&gt;
&lt;li&gt;Unlike a set, order matters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reference from: &lt;a href=&#34;https://en.wikipedia.org/wiki/Sequence&#34; target=&#34;_blank&#34;&gt;https://en.wikipedia.org/wiki/Sequence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additional theory:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sets: &lt;a href=&#34;https://en.wikipedia.org/wiki/Set_(mathematics&#34; target=&#34;_blank&#34;&gt;https://en.wikipedia.org/wiki/Set_(mathematics&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Basic explanation of sets and sequences: &lt;a href=&#34;http://www.mathsisfun.com/algebra/sequences-series.html&#34; target=&#34;_blank&#34;&gt;http://www.mathsisfun.com/algebra/sequences-series.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Useful links for Github pages</title>
      <link>https://enriquecoronadozu.github.io/post/2017-02-02-Useful%20links%20for%20Github%20pages/</link>
      <pubDate>Wed, 01 Feb 2017 10:00:00 +0000</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/post/2017-02-02-Useful%20links%20for%20Github%20pages/</guid>
      <description>&lt;p&gt;This post gives some useful links for github pages &lt;/p&gt;

&lt;h2 id=&#34;math-in-jekyll&#34;&gt;Math in Jekyll&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gastonsanchez.com/visually-enforced/opinion/2014/02/16/Mathjax-with-jekyll/&#34; target=&#34;_blank&#34;&gt;http://gastonsanchez.com/visually-enforced/opinion/2014/02/16/Mathjax-with-jekyll/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;markdown-cheatsheet&#34;&gt;Markdown Cheatsheet&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#tables&#34; target=&#34;_blank&#34;&gt;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#tables&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;example-multiligual-jekyll&#34;&gt;Example multiligual jekyll&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/sylvaindurand/jekyll-multilingual&#34; target=&#34;_blank&#34;&gt;https://github.com/sylvaindurand/jekyll-multilingual&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;hugo-academic-demo-and-info&#34;&gt;Hugo academic demo and info:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gcushen.github.io/hugo-academic-demo/&#34; target=&#34;_blank&#34;&gt;http://gcushen.github.io/hugo-academic-demo/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;compile-hugo&#34;&gt;Compile Hugo:&lt;/h2&gt;

&lt;p&gt;In the main folder of the Hugo webpage write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo
cd public
git add.
git commit -m &amp;quot;Build website&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Installation of Machine Learning libraries for my master thesis</title>
      <link>https://enriquecoronadozu.github.io/post/2017-01-30-Installation%20of%20Keras/</link>
      <pubDate>Mon, 30 Jan 2017 10:00:00 +0000</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/post/2017-01-30-Installation%20of%20Keras/</guid>
      <description>&lt;p&gt;This post contains the steps followed to perform the installation of the machine learning libraries used for my thesis. &lt;/p&gt;

&lt;h2 id=&#34;python-installation&#34;&gt;Python Installation&lt;/h2&gt;

&lt;p&gt;The python version used is 2.7 of 32-bit from the Anacoda distribution:
&lt;a href=&#34;https://www.continuum.io/downloads&#34; target=&#34;_blank&#34;&gt;https://www.continuum.io/downloads&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;update-pip-install&#34;&gt;Update pip install&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;python -m pip install --upgrade pip
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installation-of-machine-learning-libraries&#34;&gt;Installation of machine learning libraries&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# Used in MAC OS to solve the error: &amp;quot;HDF5 library version mismatched error&amp;quot;
conda install h5py

# Theano library
pip install theano

## TensorFlow library: Used only for MAC OS X and Linux
pip install tensorflow

# Keras library (In windows opening the CMD as administrator)
pip install keras
conda install mingw libpython
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;keras-backend&#34;&gt;Keras backend&lt;/h2&gt;

&lt;p&gt;Keras has two backend implementations (2017): TensorFlow and Theano. The default backend implementation is TensorFlow.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Windows there is only the Python 3.5 version of TensorFlow. In order to use Keras + Python 2.7 in Windows, the next steps can be performed:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Go to &lt;code&gt;C:\Users\&amp;lt;user name&amp;gt;&lt;/code&gt; and open the folder .keras&lt;/li&gt;
&lt;li&gt;Open the file keras.json and change the lines as:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
    &amp;quot;image_dim_ordering&amp;quot;: &amp;quot;th&amp;quot;,
    &amp;quot;epsilon&amp;quot;: 1e-07,
    &amp;quot;floatx&amp;quot;: &amp;quot;float32&amp;quot;,
    &amp;quot;backend&amp;quot;: &amp;quot;theano&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More info in: &lt;a href=&#34;https://keras.io/backend/&#34; target=&#34;_blank&#34;&gt;https://keras.io/backend/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>https://enriquecoronadozu.github.io/talk/example-talk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/talk/example-talk/</guid>
      <description>&lt;p&gt;Embed your slides or video here using &lt;a href=&#34;https://gcushen.github.io/hugo-academic-demo/post/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;shortcodes&lt;/a&gt;. Further details can easily be added using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deep Learning</title>
      <link>https://enriquecoronadozu.github.io/project/deep-learning/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/project/deep-learning/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>https://enriquecoronadozu.github.io/project/example-external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/project/example-external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Writing content with Markdown, LaTeX, and Shortcodes</title>
      <link>https://enriquecoronadozu.github.io/post/writing-markdown-latex/</link>
      <pubDate>Wed, 20 Apr 2016 10:00:00 +0000</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/post/writing-markdown-latex/</guid>
      <description>&lt;p&gt;Content can be written using &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34; target=&#34;_blank&#34;&gt;Markdown&lt;/a&gt;, &lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Mathematics&#34; target=&#34;_blank&#34;&gt;LaTeX math&lt;/a&gt;, and &lt;a href=&#34;http://gohugo.io/extras/shortcodes/&#34; target=&#34;_blank&#34;&gt;Hugo Shortcodes&lt;/a&gt;. Additionally, HTML may be used for advanced formatting. This article gives an overview of the most common formatting options.&lt;/p&gt;

&lt;h2 id=&#34;sub-headings&#34;&gt;Sub-headings&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;## Heading 2
### Heading 3
#### Heading 4
##### Heading 5
###### Heading 6
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;emphasis&#34;&gt;Emphasis&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Italics with *asterisks* or _underscores_.

Bold with **asterisks** or __underscores__.

Combined emphasis with **asterisks and _underscores_**.

Strikethrough with ~~two tildes~~.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ordered-lists&#34;&gt;Ordered lists&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;1. First item
2. Another item
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;unordered-lists&#34;&gt;Unordered lists&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;* First item
* Another item
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;images&#34;&gt;Images&lt;/h2&gt;

&lt;p&gt;Images may be added to a page by placing them in your &lt;code&gt;static/img/&lt;/code&gt; folder and referencing them using one of the following two notations:&lt;/p&gt;

&lt;p&gt;A general image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![alternative text for search engines](/img/screenshot.png)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A numbered figure with caption:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; figure src=&amp;quot;/img/screenshot.png&amp;quot; title=&amp;quot;Figure Caption&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[I&#39;m a link](https://www.google.com)
[A post]({{&amp;lt; ref &amp;quot;post/hi.md&amp;quot; &amp;gt;}})
[A publication]({{&amp;lt; ref &amp;quot;publication/hi.md&amp;quot; &amp;gt;}})
[A project]({{&amp;lt; ref &amp;quot;project/hi.md&amp;quot; &amp;gt;}})
[Another section]({{&amp;lt; relref &amp;quot;hi.md#who&amp;quot; &amp;gt;}})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;emojis&#34;&gt;Emojis&lt;/h2&gt;

&lt;p&gt;See the &lt;a href=&#34;http://www.webpagefx.com/tools/emoji-cheat-sheet/&#34; target=&#34;_blank&#34;&gt;Emoji cheat sheet&lt;/a&gt; for available emoticons. The following serves as an example, but you should remove the spaces between each emoji name and pair of semicolons:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I : heart : Academic : smile :
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ❤️ Academic 😄&lt;/p&gt;

&lt;h2 id=&#34;blockquote&#34;&gt;Blockquote&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; This is a blockquote.
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a blockquote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;I have more [^1] to say.

[^1]: Footnote example.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have more &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; to say.&lt;/p&gt;

&lt;h2 id=&#34;code-highlighting&#34;&gt;Code highlighting&lt;/h2&gt;

&lt;p&gt;Pass the &lt;em&gt;language&lt;/em&gt; of the code, such as &lt;code&gt;python&lt;/code&gt;, as a parameter after three backticks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```python
# Example of code highlighting
input_string_var = input(&amp;quot;Enter some data: &amp;quot;)
print(&amp;quot;You entered: {}&amp;quot;.format(input_string_var))
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example of code highlighting
input_string_var = input(&amp;quot;Enter some data: &amp;quot;)
print(&amp;quot;You entered: {}&amp;quot;.format(input_string_var))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;highlighting-options&#34;&gt;Highlighting options&lt;/h3&gt;

&lt;p&gt;The Academic theme uses &lt;a href=&#34;https://highlightjs.org&#34; target=&#34;_blank&#34;&gt;highlight.js&lt;/a&gt; for source code highlighting, and highlighting is enabled by default for all pages. However, several configuration options are supported that allow finer-grained control over highlight.js.&lt;/p&gt;

&lt;p&gt;The following table lists the supported options for configuring highlight.js, along with their expected type and a short description. A &amp;ldquo;yes&amp;rdquo; in the &lt;strong&gt;config.toml&lt;/strong&gt; column means the value can be set globally in &lt;code&gt;config.toml&lt;/code&gt;, and a &amp;ldquo;yes&amp;rdquo; in the &lt;strong&gt;preamble&lt;/strong&gt; column means that the value can be set locally in a particular page&amp;rsquo;s preamble.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;option&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;th&gt;config.toml&lt;/th&gt;
&lt;th&gt;preamble&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;highlight&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;enable/disable highlighting&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;highlight_languages&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;slice&lt;/td&gt;
&lt;td&gt;choose additional languages&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;highlight_style&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;choose a highlighting style&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;highlight_version&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;choose the highlight.js version&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;option-highlight&#34;&gt;Option &lt;code&gt;highlight&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;highlight&lt;/code&gt; option allows enabling or disabling the inclusion of highlight.js, either globally or for a particular page. If the option is unset, it has the same effect as if you had specified &lt;code&gt;highlight = true&lt;/code&gt;. That is, the highlight.js javascript and css files will be included in every page. If you&amp;rsquo;d like to only include highlight.js files on pages that actually require source code highlighting, you can set &lt;code&gt;highlight = false&lt;/code&gt; in &lt;code&gt;config.toml&lt;/code&gt;, and then override it by setting &lt;code&gt;highlight = true&lt;/code&gt; in the preamble of any pages that require source code highlighting. Conversely, you could enable highlighting globally, and disable it locally for pages that do not require it. Here is a table that shows whether highlighting will be enabled for a page, based on the values of &lt;code&gt;highlight&lt;/code&gt; set in &lt;code&gt;config.toml&lt;/code&gt; and/or the page&amp;rsquo;s preamble.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;config.toml&lt;/th&gt;
&lt;th&gt;page preamble&lt;/th&gt;
&lt;th&gt;highlighting enabled for page?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;unset or true&lt;/td&gt;
&lt;td&gt;unset or true&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;unset or true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;unset or false&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;option-highlight-languages&#34;&gt;Option &lt;code&gt;highlight_languages&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;highlight_languages&lt;/code&gt; option allows you to specify additional languages that are supported by highlight.js, but are not considered &amp;ldquo;common&amp;rdquo; and therefore are not supported by default. For example, if you want source code highlighting for Go and clojure in all pages, set &lt;code&gt;highlight_languages = [&amp;quot;go&amp;quot;, &amp;quot;clojure&amp;quot;]&lt;/code&gt; in &lt;code&gt;config.toml&lt;/code&gt;. If, on the other hand, you want to enable a language only for a specific page, you can set &lt;code&gt;highlight_languages&lt;/code&gt; in that page&amp;rsquo;s preamble.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;highlight_languages&lt;/code&gt; options specified in &lt;code&gt;config.toml&lt;/code&gt; and in a page&amp;rsquo;s preamble are additive. That is, if &lt;code&gt;config.toml&lt;/code&gt; contains, &lt;code&gt;highlight_languages = [&amp;quot;go&amp;quot;]&lt;/code&gt; and the page&amp;rsquo;s preamble contains &lt;code&gt;highlight_languages = [&amp;quot;ocaml&amp;quot;]&lt;/code&gt;, then javascript files for &lt;em&gt;both&lt;/em&gt; go and ocaml will be included for that page.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;highlight_languages&lt;/code&gt; option is set, then the corresponding javascript files will be served from the &lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs server&lt;/a&gt;. To see a list of available languages, visit the &lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs page&lt;/a&gt; and search for links with the word &amp;ldquo;languages&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;highlight_languages&lt;/code&gt; option provides an easy and convenient way to include support for additional languages to be severed from a CDN. If serving unmodified files from cdnjs doesn&amp;rsquo;t meet your needs, you can include javascript files for additional language support via one of the methods described in the &lt;a href=&#34;No page found with path or logical name &#34;post/getting-started.md&#34;.
&#34; target=&#34;_blank&#34;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;option-highlight-style&#34;&gt;Option &lt;code&gt;highlight_style&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;highlight_style&lt;/code&gt; option allows you to select an alternate css style for highlighted code. For example, if you wanted to use the solarized-dark style, you could set &lt;code&gt;highlight_style = &amp;quot;solarized-dark&amp;quot;&lt;/code&gt; in &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;highlight_style&lt;/code&gt; option is unset, the default is to use the file &lt;code&gt;/css/highlight.min.css&lt;/code&gt;, either the one provided by the Academic theme, or else the one in your local &lt;code&gt;static&lt;/code&gt; directory.  The &lt;code&gt;/css/highlight.min.css&lt;/code&gt; file provided by Academic is equivalent to the &lt;code&gt;github&lt;/code&gt; style from highlight.js.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;highlight_style&lt;/code&gt; option &lt;em&gt;is&lt;/em&gt; set, then &lt;code&gt;/css/highlight.min.css&lt;/code&gt; is ignored, and the corresponding css file will be served from the &lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs server&lt;/a&gt;. To see a list of available styles, visit the &lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs page&lt;/a&gt; and search for links with the word &amp;ldquo;styles&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&#34;https://highlightjs.org/static/demo/&#34; target=&#34;_blank&#34;&gt;highlight.js demo page&lt;/a&gt; for examples of available styles.&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Not all styles listed on the &lt;a href=&#34;https://highlightjs.org/static/demo/&#34; target=&#34;_blank&#34;&gt;highlight.js demo page&lt;/a&gt; are available from the &lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs server&lt;/a&gt;. If you want to use a style that is not served by cdnjs, just leave &lt;code&gt;highlight_style&lt;/code&gt; unset, and place the corresponding css file in &lt;code&gt;/static/css/highlight.min.css&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;If you don&amp;rsquo;t want to change the default style that ships with Academic but you do want the style file served from the &lt;a href=&#34;https://cdnjs.com/libraries/highlight.js/&#34; target=&#34;_blank&#34;&gt;cdnjs server&lt;/a&gt;, set &lt;code&gt;highlight_style = &amp;quot;github&amp;quot;&lt;/code&gt; in &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;highlight_style&lt;/code&gt; option is only recognized when set in &lt;code&gt;config.toml&lt;/code&gt;. Setting &lt;code&gt;highlight_style&lt;/code&gt; in your page&amp;rsquo;s preamble has no effect.&lt;/p&gt;

&lt;h4 id=&#34;option-highlight-version&#34;&gt;Option &lt;code&gt;highlight_version&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;highlight_version&lt;/code&gt; option, as the name implies, allows you to select the version of highlight.js you want to use. The default value is &amp;ldquo;9.9.0&amp;rdquo;. The &lt;code&gt;highlight_version&lt;/code&gt; option is only recognized when set in &lt;code&gt;config.toml&lt;/code&gt;. Setting &lt;code&gt;highlight_version&lt;/code&gt; in your page&amp;rsquo;s preamble has no effect.&lt;/p&gt;

&lt;h2 id=&#34;twitter-tweet&#34;&gt;Twitter tweet&lt;/h2&gt;

&lt;p&gt;To include a single tweet, pass the tweet’s ID from the tweet&amp;rsquo;s URL as parameter to the shortcode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; tweet 666616452582129664 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;youtube&#34;&gt;Youtube&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; youtube w7Ft2ymGmfc &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;vimeo&#34;&gt;Vimeo&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; vimeo 146022717 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;github-gist&#34;&gt;GitHub gist&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; gist USERNAME GIST-ID  &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;speaker-deck&#34;&gt;Speaker Deck&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; speakerdeck 4e8126e72d853c0060001f97 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rm-latex-math&#34;&gt;$\rm \LaTeX$ math&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-TeX&#34;&gt;$$\left [ – \frac{\hbar^2}{2 m} \frac{\partial^2}{\partial x^2} + V \right ] \Psi = i \hbar \frac{\partial}{\partial t} \Psi$$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$$\left [ – \frac{\hbar^2}{2 m} \frac{\partial^2}{\partial x^2} + V \right ] \Psi = i \hbar \frac{\partial}{\partial t} \Psi$$&lt;/p&gt;

&lt;p&gt;Alternatively, inline math can be written by wrapping the formula with only a single &lt;code&gt;$&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is inline: $\mathbf{y} = \mathbf{X}\boldsymbol\beta + \boldsymbol\varepsilon$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is inline: $\mathbf{y} = \mathbf{X}\boldsymbol\beta + \boldsymbol\varepsilon$&lt;/p&gt;

&lt;h2 id=&#34;table&#34;&gt;Table&lt;/h2&gt;

&lt;p&gt;Code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Markdown&#34;&gt;| Command           | Description                    |
| ------------------| ------------------------------ |
| `hugo`            | Build your website.            |
| `hugo serve -w`   | View your website.             |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hugo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Build your website.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hugo serve -w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;View your website.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;alerts&#34;&gt;Alerts&lt;/h2&gt;

&lt;p&gt;Alerts are a useful feature that add side content such as tips, notes, or warnings to your articles. They are especially handy when writing educational tutorial-style articles. Use the corresponding shortcodes to enable alerts inside your content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% alert note %}}
Here&#39;s a tip or note...
{{% /alert %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will display the following &lt;em&gt;note&lt;/em&gt; block:&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;p&gt;Here&amp;rsquo;s a tip or note&amp;hellip;&lt;/p&gt;

&lt;/div&gt;


&lt;pre&gt;&lt;code&gt;{{% alert warning %}}
Here&#39;s some important information...
{{% /alert %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will display the following &lt;em&gt;warning&lt;/em&gt; block:&lt;/p&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;p&gt;Here&amp;rsquo;s some important information&amp;hellip;&lt;/p&gt;

&lt;/div&gt;

&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Footnote example.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Analysis of Recoverable Falls Via microsoft kinect: Identification of Third-Order Ankle Dynamics</title>
      <link>https://enriquecoronadozu.github.io/publication/Analysis-of%20-Recoverable/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/publication/Analysis-of%20-Recoverable/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Migrate from Jekyll to Hugo</title>
      <link>https://enriquecoronadozu.github.io/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://enriquecoronadozu.github.io/post/migrate-from-jekyll/</guid>
      <description>

&lt;p&gt;Here are a few tips for migrating an existing website from Jekyll to Hugo. These tips can be applied in conjunction with following Hugo Academic&amp;rsquo;s &lt;a href=&#34;No page found with path or logical name &#34;post/getting-started.md&#34;.
&#34; target=&#34;_blank&#34;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;move-static-content-to-static&#34;&gt;Move static content to &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Jekyll has a rule that any directory not starting with &lt;code&gt;_&lt;/code&gt; will be copied as-is to the &lt;code&gt;_site&lt;/code&gt; output. Hugo keeps all static content under &lt;code&gt;static&lt;/code&gt;. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ static/
        ▾ images/
            logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code&gt;CNAME&lt;/code&gt;) to be moved to &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;fix-content&#34;&gt;Fix content&lt;/h2&gt;

&lt;p&gt;Depending on the amount of customization that was done for each post in Jekyll, this step will require more or less effort. There are no hard and fast rules here except that &lt;code&gt;hugo server --watch&lt;/code&gt; and the Hugo Academic example site are your friends. Test your changes and fix errors as needed.&lt;/p&gt;

&lt;h2 id=&#34;publish&#34;&gt;Publish&lt;/h2&gt;

&lt;p&gt;The default is for Jekyll to publish the website to a &lt;code&gt;_site&lt;/code&gt; directory, whereas Hugo publishes to a &lt;code&gt;public&lt;/code&gt; directory.&lt;/p&gt;

&lt;h2 id=&#34;a-practical-example&#34;&gt;A practical example&lt;/h2&gt;

&lt;p&gt;Alexandre Normand migrated his website from Jekyll to Hugo in less than a day. You can see all his changes by looking at this GitHub &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610&#34; target=&#34;_blank&#34;&gt;diff&lt;/a&gt;. However, bear in mind that this example is &lt;strong&gt;not specific to the Academic theme nor does it use the latest version of Hugo&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
